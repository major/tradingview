//@version=6
indicator('Relative Measured Volatility Circles', shorttitle = 'RMVCircles', overlay = true)

// Input parameters (must match the main RVM indicator)
lookbackPeriod = input.int(15, title = 'Lookback Period', minval = 1)
smoothing = input.bool(false, title = 'Enable Smoothing')
smoothingLength = input.int(3, title = 'Smoothing Length', minval = 1)
circleThreshold = input.float(15, title = 'Circle Alert Threshold', minval = 0, maxval = 100, step = 1)
circleColor = input.color(color.orange, title = 'Circle Color')
circleOpacity = input.int(50, title = 'Circle Opacity %', minval = 0, maxval = 100, step = 10)
circleOffset = input.float(0.5, title = 'Circle Offset Multiplier', minval = 0.1, maxval = 2.0, step = 0.1)

// Recreate RVM calculation (same logic as main indicator)
// Short-term ATRs
short1 = ta.atr(3)
short2 = ta.atr(5)
short3 = ta.atr(8)
shortAvg = (short1 + short2 + short3) / 3

// Long-term ATRs
long1 = ta.atr(55)
long2 = ta.atr(89)
long3 = ta.atr(144)
longAvg = (long1 + long2 + long3) / 3

// Combined ATR value
combinedATR = (shortAvg + longAvg) / 2

// Highest and lowest combined ATR over lookback period
highestCombinedATR = ta.highest(combinedATR, lookbackPeriod)
lowestCombinedATR = ta.lowest(combinedATR, lookbackPeriod)

// RVM Calculation
maxx = math.max(highestCombinedATR - lowestCombinedATR, 0.0001)
normRVM = (combinedATR - lowestCombinedATR) / maxx * 100

// Wilder's smoothing function
wilders_smooth(src, length) =>
    var float smoothed = na
    smoothed := na(smoothed[1]) ? src : (smoothed[1] * (length - 1) + src) / length
    smoothed

smoothRVM = wilders_smooth(normRVM, smoothingLength)
RVM = smoothing ? smoothRVM : normRVM

// Calculate position for circles below bars
circlePosition = low - ta.atr(14) * circleOffset

// Plot circles when RVM is below threshold
plotshape(RVM < circleThreshold ? circlePosition : na, style = shape.circle, location = location.absolute, color = color.new(circleColor, circleOpacity), size = size.auto, title = 'RVM Alert Circle')

// Optional: Add text label showing RVM value
showValueLabel = input.bool(false, title = 'Show RVM Value at Circles')
if showValueLabel and RVM < circleThreshold
    label.new(bar_index, circlePosition - ta.atr(14) * 0.2, str.tostring(RVM, '#.#'), color = color.new(color.white, 100), textcolor = circleColor, style = label.style_none, size = size.tiny)

// Alert condition
alertcondition(RVM < circleThreshold, title = 'RVM Below Threshold', message = 'RVM: {{plot_0}} is below threshold {{threshold}}')
