// Copyright 2025 Major Hayden
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//@version=6
indicator('Volume Historical Patterns', shorttitle = 'Vol Patterns', format = format.volume, overlay = false)

// User inputs
smaLength = input.int(20, 'SMA Length', minval = 1)
highVolMultiplier = input.float(3.0, 'High Volume Multiplier', minval = 1.0, step = 0.1)
lowVolPercentage = input.float(0.5, 'Low Volume Percentage', minval = 0.1, maxval = 1.0, step = 0.1)

// Time filtering inputs
enableTimeFilter = input.bool(false, 'Enable Time Filter', tooltip = 'Filter volume to specific hours (NYC time). Works on both intraday and daily timeframes.')
startHour = input.int(10, 'Start Hour (NYC)', minval = 0, maxval = 23)
startMinute = input.int(30, 'Start Minute', minval = 0, maxval = 59)
endHour = input.int(15, 'End Hour (NYC)', minval = 0, maxval = 23)
endMinute = input.int(00, 'End Minute', minval = 0, maxval = 59)
showTimeHeadband = input.bool(true, 'Show Time Filter Headband', tooltip = 'Display time filter settings at top of indicator')

// Function to check if a time is within trading hours (NYC time)
isTimeInRange(t) =>
    barHour = hour(t, 'America/New_York')
    barMinute = minute(t, 'America/New_York')

    // Convert times to minutes for easier comparison
    barTimeInMinutes = barHour * 60 + barMinute
    startTimeInMinutes = startHour * 60 + startMinute
    endTimeInMinutes = endHour * 60 + endMinute

    // Check if bar is within the time range
    barTimeInMinutes >= startTimeInMinutes and barTimeInMinutes <= endTimeInMinutes

// Calculate filtered volume based on timeframe
filteredVolume = if not enableTimeFilter
    volume
else if timeframe.isintraday
    // For intraday charts, just check the current bar's time
    nycTime = time('', 'America/New_York')
    isTimeInRange(nycTime) ? volume : 0
else
    // For daily or higher timeframes, sum volume from lower timeframe bars within the time range
    volArray = request.security_lower_tf(syminfo.tickerid, '5', volume)
    timeArray = request.security_lower_tf(syminfo.tickerid, '5', time)

    float totalVol = 0.0
    if array.size(volArray) > 0
        for i = 0 to array.size(volArray) - 1
            barTime = array.get(timeArray, i)
            if isTimeInRange(barTime)
                totalVol += array.get(volArray, i)
    totalVol

// Calculate volume SMA using filtered volume
volumeSMA = ta.sma(filteredVolume, smaLength)

// Track highest volume ever seen (using filtered volume)
var float highestVolume = na
highestVolume := na(highestVolume) ? filteredVolume : math.max(highestVolume, filteredVolume)

// Determine bar color and special condition flags
barColor = color.new(color.white, 75) // Regular bars: white with 25% opacity (75% transparency)
isSpecialBar = false

// Priority order for coloring (most important condition first)
if filteredVolume == highestVolume and filteredVolume > 0
    barColor := color.green // Highest volume ever
    isSpecialBar := true
    barColor
else if filteredVolume >= volumeSMA * highVolMultiplier and volumeSMA > 0
    barColor := color.yellow // High volume (configurable X times SMA)
    isSpecialBar := true
    barColor
else if filteredVolume < volumeSMA * lowVolPercentage and volumeSMA > 0
    barColor := color.red // Low volume (less than 50% of SMA)
    isSpecialBar := true
    barColor

plot(filteredVolume, style = plot.style_columns, color = barColor, linewidth = 1, title = 'Volume')
plot(volumeSMA, style = plot.style_columns, color = color.new(#8b8ba7, 30), linewidth = 1, title = 'Volume SMA')

// Display time filter headband
if enableTimeFilter and showTimeHeadband
    var table headband = table.new(position.bottom_center, 1, 1, bgcolor = color.new(color.blue, 10), border_width = 1, border_color = color.new(color.blue, 0))

    // Format time strings with leading zeros
    startTimeStr = str.format('{0,number,00}:{1,number,00}', startHour, startMinute)
    endTimeStr = str.format('{0,number,00}:{1,number,00}', endHour, endMinute)

    headbandText = '‚è∞ Time Filter (NYC): ' + startTimeStr + ' - ' + endTimeStr

    table.cell(headband, 0, 0, headbandText, text_color = color.white, text_size = size.small)
