// Copyright 2025 Major Hayden
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//@version=6
indicator('Unusual Volume Markers (thetanerd)', shorttitle = 'UnusualVol', overlay = true, max_boxes_count = 100, max_labels_count = 500)

// Input parameters
sma_length = input.int(20, title = 'Volume SMA Length', minval = 1)
volume_multiplier = input.float(3.0, title = 'Volume Multiplier for High Volume', minval = 1.0, step = 0.1)
low_volume_threshold = input.float(0.5, title = 'Low Volume Threshold (fraction of SMA)', minval = 0.1, maxval = 1.0, step = 0.1)

// Color inputs
color_all_time = input.color(color.green, title = 'All-Time High Volume Color')
color_sma_mult = input.color(color.yellow, title = 'High Volume (SMA Multiple) Color')
color_low_volume = input.color(color.red, title = 'Low Volume Color')

// Shape style inputs
shape_style = input.string('circles', title = 'Shape Style', options = ['circles', 'triangleup', 'diamond', 'cross', 'xcross'])

// Priority mode input
priority_mode = input.bool(true, title = 'Use Priority Mode (only show highest priority marker)')

// Rectangle settings for high volume days
show_rectangles = input.bool(false, title = 'Show Rectangles on High Volume Days')
rect_bars_extend = input.int(90, title = 'Rectangle Extension (bars)', minval = 1, maxval = 100)
rect_color = input.color(color.yellow, title = 'Rectangle Color')
rect_transparency = input.int(95, title = 'Rectangle Transparency (%)', minval = 0, maxval = 100)

// Label settings for volume multiplier
show_multiplier_labels = input.bool(false, title = 'Show Volume Multiplier Labels')
label_color = input.color(color.yellow, title = 'Label Text Color')
label_bg_color = input.color(color.new(color.black, 80), title = 'Label Background Color')

// Current bar multiplier label settings
show_current_multiplier = input.bool(false, title = 'Show Current Bar Multiplier (Real-Time)')
current_label_color = input.color(color.white, title = 'Current Bar Label Text Color')
current_label_bg_color = input.color(color.new(color.blue, 50), title = 'Current Bar Label Background Color')

// Calculate volume SMA
volume_sma = ta.sma(volume, sma_length)

// Check for all-time highest volume
var float all_time_high_volume = 0
all_time_high_volume := math.max(all_time_high_volume, nz(volume[1], 0))
is_all_time_high = volume > all_time_high_volume and volume > 0

// Check for volume at least X times the SMA
is_sma_multiplier = volume >= volume_sma * volume_multiplier

// Check if current bar is today and market is still open
is_current_day = barstate.isrealtime and barstate.isconfirmed == false

// Check for exceptionally low volume (50% of SMA or lower)
// Skip low volume check on current day if market is still open
is_low_volume = not is_current_day and volume <= volume_sma * low_volume_threshold

// Function to get the appropriate shape
getShape(style) =>
    switch style
        'circles' => shape.circle
        'triangleup' => shape.triangleup
        'diamond' => shape.diamond
        'cross' => shape.cross
        'xcross' => shape.xcross
        => shape.circle

selected_shape = getShape(shape_style)

// Determine which markers to show based on priority mode
// Priority: All-time high > High volume > Low volume
show_all_time = priority_mode ? is_all_time_high : is_all_time_high
show_sma_mult = priority_mode ? is_sma_multiplier and not is_all_time_high : is_sma_multiplier
show_low_volume = priority_mode ? is_low_volume and not is_sma_multiplier and not is_all_time_high : is_low_volume

// Plot a label above the bar or a yellow circle depending on configuration
if show_multiplier_labels and is_sma_multiplier
    multiplier = volume / volume_sma
    multiplier_rounded = math.round(multiplier)
    label_text = str.tostring(multiplier_rounded) + "x"
    label.new(bar_index, close, label_text, 
              color = label_bg_color, 
              textcolor = label_color, 
              style = label.style_label_right,
              size = size.normal)

plotshape(series = show_all_time, location = location.abovebar, style = selected_shape, size = size.auto, color = color_all_time, title = 'All-Time High Volume')
plotshape(series = show_sma_mult, location = location.abovebar, style = selected_shape, size = size.auto, color = color_sma_mult, title = 'High Volume (SMA Multiple)')
plotshape(series = show_low_volume, location = location.abovebar, style = selected_shape, size = size.auto, color = color_low_volume, title = 'Low Volume')

// Add alerts
alertcondition(is_all_time_high, title = 'All-Time High Volume', message = 'All-time high volume detected on {{ticker}}')
alertcondition(show_sma_mult, title = 'High Volume Spike', message = 'High volume spike detected on {{ticker}} - volume is above SMA threshold')

// Display current values in data window
plot(volume, title = 'Current Volume', display = display.data_window)
plot(volume_sma, title = 'Volume SMA', display = display.data_window)
plot(all_time_high_volume, title = 'All-Time High Volume', display = display.data_window)

// Draw rectangles on high volume days (yellow circles)
if show_rectangles and is_sma_multiplier
    box.new(bar_index, high, bar_index + rect_bars_extend, low, border_color = na, bgcolor = color.new(rect_color, rect_transparency))

// Show real-time multiplier for current bar
if show_current_multiplier and barstate.islast
    current_multiplier = volume / volume_sma
    current_text = str.tostring(current_multiplier, format.mintick) + "x"
    var label current_label = na
    label.delete(current_label)
    current_label := label.new(bar_index, low, current_text,
                              color = current_label_bg_color,
                              textcolor = current_label_color,
                              style = label.style_label_upper_left,
                              size = size.normal)
